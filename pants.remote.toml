# For goals that you'd like to remote, first install the Google cloud CLI and then log in to an
# an account authorized to run the Pants project (you may need to ask a Pants committer for
# to authorize your account). Then, point to this config file and provide the oauth token like this:
#
#  $ ./pants --pants-config-files=pants.remote.toml
#     --remote-oauth-bearer-token-path=<(gcloud auth application-default print-access-token)
#     test tests/python/pants_test/util:strutil
#
# Remoting does not work for every goal, so you should not permanently point to this TOML file, e.g.
# via an env var; only point to it when you want to remote a specific invocation.

[GLOBAL]
remote_execution = true
remote_execution_server = "build.toolchain.com:44i3"
remote_store_server = "remotebuildexecution.googleapis.com"
remote_ca_certs_path = "/etc/ssl/certs/ca-certificates.crt"
remote_instance_name = "main"
remote_execution_extra_platform_properties = [
  # This allows network requests, e.g. to resolve dependencies with Pex.
  "execution-policy=network",
  "execution-policy=container-image=pants-remote-execution:47f364584e3e4bd8c8ecf71639efaec34133e3a9",
]
process_execution_remote_parallelism = 6

[pex]
executable_search_paths = [
  # These are the interpreter paths we set up on the remote container. We need to specify these
  # because many of our tests for the Python backend need to discover Python interpreters.
  "/pyenv-docker-build/versions/3.8.5/bin:/pyenv-docker-build/versions/3.7.8/bin:/pyenv-docker-build/versions/3.6.11/bin:/pyenv-docker-build/versions/2.7.18/bin",
  # The remote container has binaries like `ld` and `gcc` in /usr/bin.
  "/usr/bin",
]

[python-setup]
interpreter_search_paths = [
  # These are the interpreter paths we set up on the remote container.
  "/pyenv-docker-build/versions/3.8.5/bin:/pyenv-docker-build/versions/3.7.8/bin:/pyenv-docker-build/versions/3.6.11/bin:/pyenv-docker-build/versions/2.7.18/bin",
]

[python-native-code]
ld_flags = []
cpp_flags = []
